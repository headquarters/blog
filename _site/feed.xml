<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael's Headquarters</title>
    <description>Michael Head is a UX-focused software engineer with more than 8 years of experience building awesome user experiences for small agencies, mid-sized companies, and Fortune 50 corporations.
</description>
    <link>https://www.michaelehead.com/</link>
    <atom:link href="https://www.michaelehead.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Dec 2019 03:12:26 +0000</pubDate>
    <lastBuildDate>Sat, 28 Dec 2019 03:12:26 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Unzipping a large gzip file in Python</title>
        <description>&lt;h1 id=&quot;the-project&quot;&gt;The Project&lt;/h1&gt;
&lt;p&gt;I worked on a project recently that required ingesting a large flat file that my team received as a gzipped file. The gzipped file was 3GB in size and uncompressed it was about 55GB. It had around 200 million rows in it. The ingest process involved taking that file and getting the data into an Aurora RDS MySQL database.&lt;/p&gt;

&lt;p&gt;I inherited the project from a previous team that had implemented a way of ingesting the file via the Python library Pandas. Pandas can “stream” unzip and decompress a file, grabbing lines of a few chunks at a time (say 10000 lines), and inserting it into a database. I was pretty impressed, given the gzipped file size. Inserting all those records via Pandas took between 4-5 hours.&lt;/p&gt;

&lt;h1 id=&quot;the-environment&quot;&gt;The Environment&lt;/h1&gt;
&lt;p&gt;The gzipped file sat in an S3 bucket that a Python script would read from. The Python script ran in an AWS Step Function that spun up a container via Fargate. The container was maxed out in its resources in ECS with a soft limit of RAM around 30GB and a max disk space of 14GB. So, unzipping this file into memory or onto disk was not an option and the Pandas process worked really well to avoid exhausting memory or disk space.&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;
&lt;p&gt;After doing some performance analysis I found that using the native MySQL &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD DATA LOCAL INFILE&lt;/code&gt;, and more specifically its AWS-specific cousin &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt;, would be a lot faster than the Pandas process. In fact, it shaved off around 2.5 hours. However, MySQL only supports loading uncompressed files via the &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;We updated the ingest process to use &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt; and saw a performance uptick, but we then had to manually uncompress the file before uploading it to its original S3 bucket. This took a long time—uploading a 55GB file via &lt;code class=&quot;highlighter-rouge&quot;&gt;aws s3 cp&lt;/code&gt; would take about an hour from our local machines on our office network. This wasn’t a great compromise because we introduced a manual step that was time consuming and prone to failing (if a computer went to sleep while uploading, for example).&lt;/p&gt;

&lt;p&gt;I started testing out whether we could download the gzipped file to our Fargate container and unzip it there before loading to MySQL. Unfortunately, I ran into memory constraints and disk space constraints in Fargate. At that point we could have scrapped that infrastructure and gone with something else like EC2, but the existing infrastructure was very appealing and it seemed possible to do this without exhausting the container’s memory or disk space. Pandas got away with it, right?&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;
&lt;p&gt;After several rounds of searching online, reading through various StackOverflow answers, and lots of trial and error I finally found a solution. Python could open the gzipped file without reading its entire contents to memory or saving it to disk and boto3 could &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_fileobj&quot;&gt;upload it back to S3 as a file object&lt;/a&gt;. Then, since the file is back in S3 as a decompressed file as if we’d uploaded it ourselves, we can continue to use &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt; as normal. Voila! Problem solved with &lt;a href=&quot;https://github.com/headquarters/python-streaming-unzip/blob/master/src/main.py#L22-L23&quot;&gt;two lines of Python code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To showcase the power of this method for decompressing a large file without exhausting memory or disk space, I put together a repository that demonstrates the various scenarios I tried: https://github.com/headquarters/python-streaming-unzip. Here you can play around with a Docker container that can execute a Python script that attempts to decompress a gzipped file into memory, onto disk, or via the streaming method. You’ll have to provide your own large compressed file in S3, though.&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Dec 2019 03:11:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2019/12/28/python-streaming-unzip.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2019/12/28/python-streaming-unzip.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>The Founder's Mentality, DevOps, and Agile</title>
        <description>&lt;p&gt;I recently listened to the audiobook &lt;a href=&quot;https://www.foundersmentality.com/&quot;&gt;The Founder’s Mentality&lt;/a&gt;. This book posits that many companies experience 3 problems during their growth phase: overload, stallout, and freefall. As companies get larger, complexity and bureauracy increase, so “overload” starts to kick in. Left unchecked, this overload eventually leads to stallout—the company is stifled in terms of innovation and growth is difficult. Finally, when things start to look really bleak, the company goes into freefall where the stock starts to decline, people leave, and eventually the company folds.&lt;/p&gt;

&lt;p&gt;The book recommends 9 things to turn the ship around for a growing company: a bold mission, “spikiness”, a limitless horizon, customer advocacy, frontline empowerment, relentless experimentation, strong cash focus, a bias to action, and an aversion to bureaucracy. I felt there was a lot of overlap between what these recommendations and two other popular movements today, namely DevOps and Agile. I put together the following table to explain this overlap as I see it.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;The Founder’s Mentality&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Agile&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Bold Mission&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Neither DevOps nor Agile has anything to say about your company’s mission. Rather, these practices are meant to help you achieve it.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Spikiness*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Automation, virtualization, and open source software allows the business to focus resources on things that matter most (the “spikes”).&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Short, focused sprints allow us to pivot quickly to something that requires more attention (the “spike”).&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Neither DevOps nor Agile speaks to where a company should spend its resources, but each provides some flexibility in moving those resources around (whether the resource is time, money, or attention). Even most tech companies are not in the business of managing data centers, so why spend the time or money on that non-core business matter?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Limitless Horizon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Again, neither practice has anything to say about how the company defines itself or its potential.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frontline Obsession: Relentless Experimentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Experimentation is a key component. This is one way teams continuously learn and improve.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Experimentation is not mentioned explicitly in Agile, but it is probably an unspoken tenet as means of continuous improvement.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Lots of overlap with DevOps and The Founder’s Mentality on Experimentation. Agile doesn’t have as much to say directly about experimentation, but it is somewhat implied in the iterative approach of design and development through sprints.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frontline Obsession: Frontline Empowerment&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;“Keep pushing quality closer to the source.” The frontline is the source of design/dev/ops work.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heavy emphasis on teams: “The best architectures, requirements, and designs emerge from self-organizing teams.“&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Agile’s emphasis on self-organizing and empowered teams really echoes the “frontline empowerment” of The Founder’s Mentality. Also, DevOps emphasizes pushing quality out to the source of work, which requires empowering the teams doing the work.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*&lt;a href=&quot;https://www.foundersmentality.com/2015/12/16/the-elements-of-founders-mentality-spikiness/&quot;&gt;Spikiness&lt;/a&gt;: “Competitiveness comes from sticking to what the company is great at and focusing resources ruthlessly on these few spikey capabilities.” “[B]eing world class at those things that really matter for customers and decidedly average at the rest.”&lt;/p&gt;

&lt;p&gt;Sources: &lt;a href=&quot;https://itrevolution.com/book/the-devops-handbook/&quot;&gt;The DevOps Handbook&lt;/a&gt; and &lt;a href=&quot;http://agilehandbook.com/agile-handbook.pdf&quot;&gt;Agile Handbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a ton of overlap between these 3 topics. In my mind, The Founder’s Mentality is DevOps/Agile explained in a way that non-technology-centric business executives can relate to. It reinforces to me that, at the end of the day, product, design, development, operations, and every other unit of business are all trying to achieve the same thing, but we have various ways to execute on that vision and occasionally our terminology doesn’t line up. Hopefully a comparison like this will help bridge the gap for some folks out there.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Dec 2018 08:30:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2018/12/10/founders-mentality-devops-and-agile.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/12/10/founders-mentality-devops-and-agile.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Ember.js - 6 months in</title>
        <description>&lt;h1 id=&quot;my-first-six-months-with-emberjs&quot;&gt;My first six months with Ember.js&lt;/h1&gt;
&lt;p&gt;After reading &lt;a href=&quot;https://medium.com/@Realrobwebb/my-first-6-months-using-ember-a-retrospective-a5ecf3259b09&quot;&gt;this Ember.js six months in article&lt;/a&gt;, I realized it was time to publish my own 6-months-in report. I started with Ally Financial as a Senior Front-end Engineer in November 2017, so as of this writing it’s been about 6 months. Since March, though, I’ve been a tech lead for a scrum product team, so I haven’t been quite as hands-on in day-to-day development. I still do a good bit of new feature work, bug fixing, code review, and so on, though, so I haven’t left development behind completely.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Before I go on, I must emphasize the following: &lt;em&gt;the work of all the Ember.js core team and the community of developers is amazing and I am in no way trying to disparage the work of those involved or belittle their effort. When it comes to technology, as with everything, there are trade-offs; they’ve chosen certain design decisions that, say, the React team has not. I fully respect these decisions, even if I don’t always agree with them.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;convention-over-configuration&quot;&gt;Convention over configuration&lt;/h2&gt;
&lt;p&gt;Most of my professional front-end experience has invovled plain ol’ JavaScript, jQuery, or React. I really grew to like the React mental model when I worked in it in previous jobs. This has been something that is very hard to get used to in the more MVC-esque approach that Ember takes. Obviously, it’s not a fair comparison because React is “just” the view layer, whereas Ember is a framework for web applications. Nonetheless, I feel the whole ecosystem of React, Webpack, React Router, and Redux lends itself to building “ambitious” web applications just as easily as Ember lends itself to the same. It can be overwhelming connecting all the “plumbing” to fit these disparate libraries together, but that doesn’t feel much more difficult than figuring out all the conventions that Ember follows. And Ember makes heavy use of conventions—one of its mottos is “convention over configuration” (influenced by Ruby on Rails).&lt;/p&gt;

&lt;p&gt;The build tool that Ember uses under the hood, &lt;a href=&quot;http://broccolijs.com/&quot;&gt;Broccoli&lt;/a&gt;, has a pretty straightforward concept—it works with trees, as opposed to files. This seems very simple, but can lead to very strange issues when it comes to merging trees. Naming collisions cause very-hard-to-debug errors. For example, we realized one of our app files had the same name as a 3rd party dependency, so it was overriding the dependency. No compile or runtime errors.&lt;/p&gt;

&lt;p&gt;One category of conventions that is still somewhat confusing to me is add-ons vs. apps. The whole index.js vs. ember-cli-build.js file seems like an arbitrary distinction—each type of project has each of the files, but apps use one file (ember-cli-build.js) and add-ons use the other. Huh?&lt;/p&gt;

&lt;p&gt;Also, add-ons require re-exporting files for use in the consuming app. That really threw me off in my work starting out with apps that had add-ons because the duplication seemed so unnatural. This isn’t such a problem if you let ember-cli handle all the file manipulation for you, but that in and of itself takes somet time to master; to remind yourself “oh yeah, I can’t delete anything on my own or else things get out of sync” or “I shouldn’t create this file by hand because then it won’t have a re-exported file created for it, unless I remember to do it manually”.&lt;/p&gt;

&lt;h2 id=&quot;templating&quot;&gt;Templating&lt;/h2&gt;
&lt;p&gt;Coming from React, templating and components in Ember is my biggest pain point. Having used ES6 modules in React and relying on JavaScript’s import system, I was used to being very explicit about dependencies. With Handlebars templates, everything shares a global scope so anything is usable from anywhere. Also, Handlebars templates don’t serve as UI components on their own—their behavior is encapsulated in a backing JS file. This was very strange coming from the single-file concept of JSX where behavior and template were contained in a single file. And this is coming from someone that had to unlearn the “separation of concerns” mantra when starting out in React; having learned it, I loved it, and it was hard to go back!&lt;/p&gt;

&lt;h2 id=&quot;jquery&quot;&gt;jQuery&lt;/h2&gt;
&lt;p&gt;Ember still relies on jQuery under the hood for DOM manipulation, but that is going away soon. The problem with it at the moment is developers tend to rely too heavily on it, because it’s there. At least in a fresh React app, it’s not available, so you have to do things more “the React way”. I think having jQuery around allows you to break out of Ember’s component model too easily, so I’m glad it’s going away in the future.&lt;/p&gt;

&lt;h2 id=&quot;always-pros-and-cons&quot;&gt;Always pros and cons&lt;/h2&gt;
&lt;p&gt;There are always pros and cons to every piece of technology and you ultimately have to pick the right tool for the job without being overly dogmatic about your decision. I think Ember is a great addition to the tools available to web developers these days. It’s worth knowing about these pros and cons before diving into a new framework, so hopefully this helped give some insight into what a newbie Ember developer coming from a React world might expect.&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Mar 2018 09:48:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2018/03/10/ember-js-6-months-in.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/03/10/ember-js-6-months-in.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>How to Create a Bookmarklet</title>
        <description>&lt;p&gt;JavaScript bookmarklets are snippets of code that can manipulate webpages. They’re sometimes
useful for small automation tasks, such as filling out a form or clicking buttons. In
this post I’ll walk through one way to create a bookmarklet.&lt;/p&gt;

&lt;p&gt;I used node version 8.1.2 and npm version 5.0.3 for the following steps. You can also 
do all this in a simple text editor, but the addition of a build step makes the workflow a bit faster. 
Without the build step, you have to escape the output and put it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; 
yourself or use an &lt;a href=&quot;http://userjs.up.seesaa.net/js/bookmarklet.html&quot;&gt;online bookmarklet generator&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In this example, we’re going to create a bookmarklet that takes the page title and displays 
it at the top of the page.&lt;/p&gt;

&lt;p&gt;Start by creating a directory for the project, going into it, and initializing an NPM package:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;show-title-bookmarklet
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;show-title-bookmarklet
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When prompted for all the NPM init steps, just keep hitting enter (for the sake of the example).&lt;/p&gt;

&lt;p&gt;Next, we’ll install the &lt;a href=&quot;https://www.npmjs.com/package/bookmarklet&quot;&gt;bookmarklet&lt;/a&gt; NPM 
package that can create our bookmarklet. Then, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directory to contain our source
file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bookmarklet &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;src&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file at the root of your project and add a “build” script
that invokes the bookmarklet on the file in “src/index.js” and outputs it to 
“dist/bookmarklet.js”, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bookmarklet src/index.js dist/bookmarklet.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s create the file at src/index.js that will be our bookmarklet source:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.title__bookmarklet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;title__bookmarklet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textAlign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontFamily&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lightyellow&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;100vw&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;99999&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Back at the command line, run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; in order to create your bookmarklet.js
in the “dist” folder. The file will contain code in the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;javascript:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; your code here &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Copy the contents of dist/bookmarklet.js. In your browser (other than Edge :),
add a new bookmark and paste the bookmarklet contents in the URL field and set
the page title to whatever you want. These steps are highlighted in the GIF below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gifs/bookmarklet.gif&quot; alt=&quot;Animation showing the steps in the preceding paragraph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And done! Congratulations, you made a bookmarklet with a build step. Now, if you want to edit
the source file you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and regenerate it to have a completely new
version. The example we created here is available as a 
&lt;a href=&quot;https://github.com/headquarters/show-title-bookmarklet&quot;&gt;GitHub repo&lt;/a&gt;, too.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 09:48:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2018/03/10/how-to-create-a-bookmarklet.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/03/10/how-to-create-a-bookmarklet.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Baby Registries and Service Design</title>
        <description>&lt;p&gt;My day job is programming, but one of my personal interests is design, especially user experience design.&lt;br /&gt;
One form of design is &lt;a href=&quot;https://www.nngroup.com/articles/service-design-101/&quot;&gt;service design&lt;/a&gt;, where
an organization attempts to organize its people and resources in such a way as to improve the experience of employees and customers. 
This post explores the service design of baby registries for two large retails: Babies R’ Us and amazon.com.&lt;/p&gt;

&lt;p&gt;In June of this year, my wife gave birth to our 3 beautiful daughters—yes, triplets. :scream emoji:&lt;/p&gt;

&lt;p&gt;It was a pretty risky pregnancy because two of the 3 shared
everything in utero, called &lt;a href=&quot;https://en.wikipedia.org/wiki/Monoamniotic_twins&quot;&gt;monoamniotic, or MOMO, twins&lt;/a&gt;. So, we were somewhat fearful
the whole pregnancy that all three might not make it, but thankfully they did. We never had any baby showers before the kids were born, because it
 would have been a painful reminder to have 3 of something when we only needed one or two in the end.&lt;/p&gt;

&lt;p&gt;In July, we started the process of putting together a registry for an upcoming baby shower. 
We settled on two places to register: Babies R’ Us and amazon.com. The shower was going to consist of 
mixed generations of folks, some of which prefer not to shop online, so Babies R’ Us made sense for that
part of the guest list. For the remainder of folks, especially those who can’t travel to be here in person,
the amazon.com list made a lot of sense.&lt;/p&gt;

&lt;p&gt;The experience registering at Babies R’ Us was a pain, all revolving around a single 
form-field input validation issue: you cannot register for a baby shower if the baby has already 
been born (i.e. your expected date is in the past). This is an example of the “backstage” coming to the forefront in the user interface: 
some limitation of technology, some internal process, or some cultural oversight in the Babies R’ Us organization enforced a
rule at the lowest level of touchpoints with users, a form field.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/images/posts/babiesrus/registry-creation-error.png&quot; alt=&quot;Screenshot of registry creation error on babiesrus.com&quot; /&gt;
    &lt;figcaption&gt;The baby registry form on babiesrus.com would not allow a due date in the past.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Our original due date was in August, but we didn’t want to put that because
they were already born (or “arrived” as the UI states). It seemed disenguous to say they weren’t born yet when they were. We decided we’d
try to register in person, hoping that wouldn’t be a problem for an associate. 
[screenshot of form field only allowing 2019 when month is June]&lt;/p&gt;

&lt;p&gt;amazon.com, on the other hand, allowed registering when the babies had already been born, 
but did provide a warning message in their form indicating that we had picked a date in the past. In the end, it didn’t seem to have affected any of the actual registry creation, though. One creepy
thing Amazon did was pre-populate the registry with some “sponsored” items, which
I promptly removed. If they had been “suggestions” and not just plopped into the list from the
beginning, then I think that would have been less creepy. This is a breakdown in speaking the customer’s language–as a new
parent, I want “suggestions” for what to purchase, but as a customer I am always on the lookout to avoid overt advertisements.&lt;/p&gt;

&lt;p&gt;Since we weren’t able to register at babiesrus.com (which just redirects to toysrus.com…another issue of backstage components influencing frontstage interfaces), we went to the 
nearest Babies R’ Us store to register in person. We went to the Baby Registry desk and spoke
with the associates there. They gave us a &lt;a href=&quot;/images/posts/babiesrus/registry-form-large.png&quot;&gt;paper form&lt;/a&gt; to fill out to create a registry.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/images/posts/babiesrus/registry-password.png&quot; alt=&quot;Scanned copy of registry paper form password section&quot; /&gt;
    &lt;figcaption&gt;The Babies R' Us registry creation form had this section for writing your password.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A few concerns here: it’s a paper form and the associates did not offer to allow us to fill
out the form online—they were effectively transcribing from written form to online form. This
is an inefficient workflow for the organization and for users (they have to put the information on paper, then
wait for an associate to transcribe it). Also, there is a big red flag for security here: asking 
users to put a password down in plaintext on a paper form is a Bad Thing(tm). Users tend to 
reuse passwords across sites, so this is giving their password to associates on a piece
of paper that may be reused on another site. The assumption is to trust the associates, but 
why put employees and customers in such a situation where they have to be concerned about this?
Just letting customers fill out a form on a computer at the Registry desk would obviate this problem.&lt;/p&gt;

&lt;p&gt;It turned out that the associate was transcribing directly into the same form we tried to fill out online ourselves. 
The associate had no special access to the “backstage” of the organization’s systems to do “magical”
things like simply put a due date in the past. Since the babies were technically due in August, we had them use
the original due date for their “arrival date” instead of the date they were born, despite having alread “arrived”. 
In hindsight, we should have done the same in the online form, but what if we had waited until the after the due 
date to sign up? We would have run into the same problem.&lt;/p&gt;

&lt;p&gt;We finally got our account and our registry gun and went off to shoot a bunch of barcodes.&lt;/p&gt;

&lt;p&gt;The barcode shooting had a fun, tactile experience to it that simply adding items online can’t quite
compete with. Sure, searching for anything imaginable on amazon.com is nice, but sometimes you don’t know
what kinds of baby things are even out there that you &lt;em&gt;might&lt;/em&gt; need, so how do you search for those things?
This is where being in a store with actual shelves beats online shopping in my opinion. Despite the fun, tactile experience, the 
gun itself had some UX issues–it couldn’t scan some barcodes and it required multiple scans to increase
the quantity, which wouldn’t have been such a big deal if it scanned successfully every time and didn’t have a 10-20 second “cooldown” period before the next scan could happen. The associates suggested scanning as much as possible and removing/editing things later online.&lt;/p&gt;

&lt;p&gt;Later in the day, we tried to log into the registry by going to babiesrus.com. As you can see in the screenshot below
there is a very prominent My Account/Sign In link in the upper right. On the same row of links, less prominent due
to the lower contrast text, is a Baby Registry link. Since we had just gone through the trouble of creating 
what I thought was a Babies R’ Us account, I tried logging into my account by going to MyAccount/Sign In. 
Turns out, that was not a Babies R Us account we set up, but truly JUST a baby registry…account. The correct
path is: click Baby Registry and then click the “update” button under “update my registry”.&lt;/p&gt;

&lt;p&gt;Not only are they separate “accounts” but they have different password rules as well. The normal account
has a minimum of 8 characters and maximum of 50 characters for the password length, while the registry account
has a minimum of 6 characters and maximum of 10 characters. This is definitely a sign of backstage processes or technology
has come to the frontstage UI in a bad way–one team works on the normal account and the other works on baby registry accounts,
and they never coordinated internally. What if, in the future, some product manager wants a way to create normal accounts by 
“migrating” registry accounts? Many passwords (6 and 7 characters long) would fail the migration and you end up with data migration headaches.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/images/posts/babiesrus/registry-login-page.png&quot; alt=&quot;Screenshot of babiesrus.com registry login page&quot; /&gt;
    &lt;figcaption&gt;The registry account requires minimum length of 10 for the password.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img src=&quot;/images/posts/babiesrus/account-login-page.png&quot; alt=&quot;Screenshot of babiesrus.com account login page&quot; /&gt;
    &lt;figcaption&gt;The non-registry account requires minimum length of 8 for the password (plus a whole host of other requirements).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Creating a baby registry on amazon.com was much easier than going through the process on babiesrus.com. Less of Amazon’s backstage
leaks into the frontstage UI in negative ways and the result is a nicer user experience for the whole service. Babies R’ Us has some work
to do to improve its user experience for baby registries, but some of it is very low hanging fruit (e.g. the form field validation) that could
ease the frustration of dealing with their service.&lt;/p&gt;

&lt;p&gt;Update: they’ve undergone a redesign so some screenshots are out of date and they now use babiesrus.com, so they’re improving!&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Aug 2017 09:48:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2017/08/05/baby-registries-and-service-design.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2017/08/05/baby-registries-and-service-design.html</guid>
        
        <category>ux</category>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Some Personal Notes on Development</title>
        <description>&lt;p&gt;After posting &lt;a href=&quot;/2017/07/16/personal-notes-on-ux-design.html&quot;&gt;some personal notes on UX design&lt;/a&gt;, I figured why not publish all the notes
I keep for development, too? Below are random snippets of code I’ve found useful, CLI commands, and other tidbits that I 
always find myself coming back to for reference.&lt;/p&gt;

&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Kill a process by name (only verified on macOS)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example: `sudo pkill node`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pkill &lt;span class=&quot;nv&quot;&gt;$PROCESSNAME&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# SSH config with multiple hostnames and a domain controller prefix for username, ~/.ssh/config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This allows you to do something like `ssh name1` and it will expand to include the username and proper key &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# It's counterintuitive, but the generic settings (Host *) go at the bottom of the file&lt;/span&gt;
Host name1 name2 name3 
  HostName %h.domain.tld
  &lt;span class=&quot;c&quot;&gt;# Rarely needed, more likely your username does not have a prefix&lt;/span&gt;
  User &lt;span class=&quot;s2&quot;&gt;&quot;controller&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sername&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Override specific properties of the &quot;*&quot; Host setting&lt;/span&gt;
Host name4
  HostName differentdomain.tld
  IdentityFile ~/.ssh/private_key2

Host &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
  IdentityFile ~/.ssh/private_key
  ForwardAgent &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# These two are macOS specific&lt;/span&gt;
  AddKeysToAgent &lt;span class=&quot;nb&quot;&gt;yes
  &lt;/span&gt;UseKeychain &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Snippets from .bash_profile &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Edit the profile itself&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;showprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cat ~/.bash_profile&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;editprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nano ~/.bash_profile&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loadprofile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;source ~/.bash_profile&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# macOS flushdns&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;flushdns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo killall -HUP mDNSResponder&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Spin up simple Python server in current directory (wherever the command is run)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pythonserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python -m SimpleHTTPServer 8000&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Node.js ENV shortcuts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;setprod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export NODE_ENV=production&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;setdev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unset NODE_ENV&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;checkenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;NODE_ENV&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# macOS IPv6 toggling&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;disableipv6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;networksetup -setv6off Wi-Fi&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enableipv6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;networksetup -setv6automatic Wi-Fi&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# macOS copy IP addresses to clipboard&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getethernetip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ipconfig getifaddr en0 | pbcopy&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;getwirelessip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ipconfig getifaddr en1 | pbcopy&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Configure git CLI (requires .git-prompt shell file)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.git-prompt.sh
&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[\u@\h \W$(__git_ps1 &quot; (%s)&quot;)]\$ '&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make nano the default editor because who wants to deal with vi when doing git commit? ;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nano

&lt;span class=&quot;c&quot;&gt;# Load SSH identities since macOS forgets on reboot&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
ssh-add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Symlink a folder; notice there are no trailing slashes (only verified on macOS)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sFv&lt;/span&gt; /path/to/original-folder /path/to/folder-symlink&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Tail multiple logs at the same time&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /var/log/name&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.log&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Delete files older than 5 days&lt;/span&gt;
find ./&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-mtime&lt;/span&gt; +5 &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Find processes listening on $PORT&lt;/span&gt;
lsof &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;LISTEN&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# git commands&lt;/span&gt;
git diff branch1..branch2 &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; filename

git cherry-pick &amp;lt;commit &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Show disk space used with human readable file format&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Find the top 10 largest directories in /path&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;du&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Sh&lt;/span&gt; /path | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rh&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 08:15:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2017/07/19/personal-notes-on-development.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2017/07/19/personal-notes-on-development.html</guid>
        
        <category>ux</category>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Some Personal Notes on UX Design</title>
        <description>&lt;p&gt;Below are some random personal notes on UX design I’ve put together over the years. I’ve tried to site sources where it makes sense. This used to be a note on my computer, but I think it makes sense to share it here so others might find it useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Systems cannot be purely “simple”. A single button is very simple, but provides no usefulness. Balance simplicity with functionality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Everything&lt;/em&gt; competes for attention.&lt;/p&gt;

&lt;p&gt;Contrast is the strongest visual cue (Dondis, Primer on Visual Literacy).&lt;/p&gt;

&lt;p&gt;If possible, avoid using &lt;em&gt;lorem ipsum&lt;/em&gt; placeholder text in wireframes. It creates extra unnecessary cognitive load on 
users to decipher the language.&lt;/p&gt;

&lt;p&gt;Minimize mouse movement (i.e. drag n’ drop). By minimizing mouse movement, we step around Fitts’ Law and
eliminate the need for fine-grain motor control in user interfaces.&lt;/p&gt;

&lt;p&gt;Be mindful of unintended consequences. (Kind of an oxymoron, huh?)&lt;/p&gt;

&lt;p&gt;User intentions and motivations are more stable than their preferences or actions. Preferences or actions can change when a system is upgraded, but the intentions and motivations rarely change.&lt;/p&gt;

&lt;p&gt;Some things just aren’t intuitive: what is an “intuitive” hand gesture to change the color of a square from purple to yellow or duplicate a square? Every new thing has to be learned. (from a talk called Tenets+Traps at Microsoft Build)&lt;/p&gt;

&lt;p&gt;Expectations drive attention: sometimes once you see something, you can’t stop seeing it. Especially relevant as a developer of 
user interfaces. (also Tenets+Traps)&lt;/p&gt;

&lt;p&gt;Letters are shapes, too. Sometimes that’s all a foreign language speaker needs. “OK” and “TV” are examples.&lt;/p&gt;

&lt;p&gt;Design is biased towards action. If you can’t take action on a problem, it’s not a problem, it’s a circumstance. A lot of people have a problem that isn’t a problem, it’s a circumstance. (adapted from http://www.npr.org/templates/transcript/transcript.php?storyId=507901716)&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jul 2017 15:07:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2017/07/16/personal-notes-on-ux-design.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2017/07/16/personal-notes-on-ux-design.html</guid>
        
        <category>ux</category>
        
        <category>design</category>
        
        
      </item>
    
      <item>
        <title>Using Twitter Bootstrap Components with React</title>
        <description>&lt;p&gt;Updated July 2017: The CodePen now handles focus and blur events in a self-contained manner (no need
for a parent or app-level component to track the state) so that keyboard events work better than they did
in the original version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;facebook.github.io/react/&quot;&gt;React&lt;/a&gt; continues to gain traction as a library for creating 
user interfaces for the web (and for other &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;platforms&lt;/a&gt;). 
React is great for building UI components at a lower level than what you might get from a framework. 
Nonetheless, many frameworks remain popular such as Twitter &lt;a href=&quot;getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;, which provides a lot more
ready-made components out of the box.&lt;/p&gt;

&lt;p&gt;Twitter Bootstrap’s components that have interactivity (e.g. Dropdown, Modal, etc), utilize jQuery as the
JavaScript library for handling the state of these components and the event binding. What if you find
yourself wanting to mix Bootstrap and React? If you utilize React elsewhere but want to use a single Bootstrap 
component, it’s not a great idea to include jQuery to make the Bootstrap component “functional”.&lt;/p&gt;

&lt;p&gt;Some options exist, such as &lt;a href=&quot;https://react-bootstrap.github.io/&quot;&gt;React Bootstrap&lt;/a&gt; and &lt;a href=&quot;https://reactstrap.github.io/&quot;&gt;Reactstrap&lt;/a&gt;. Unfortunately for React Bootstrap, it appears to still be using Bootstrap version 3, so if you want to use version 4 (even though it &lt;em&gt;is&lt;/em&gt; alpha) you’re out of luck. Reactstrap is built with version 4 support, but still might be overkill for some particular cases.&lt;/p&gt;

&lt;p&gt;It’s not too difficult to take a Bootstrap component and create a React-ready component from it. Here is an example
of the &lt;a href=&quot;https://codepen.io/michaelehead/pen/gRPqYQ&quot;&gt;dropdown component on CodePen&lt;/a&gt;:&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gRPqYQ&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;michaelehead&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;React Bootstrap Dropdown&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/michaelehead/pen/gRPqYQ/&quot;&gt;React Bootstrap Dropdown&lt;/a&gt; by Michael Head (&lt;a href=&quot;https://codepen.io/michaelehead&quot;&gt;@michaelehead&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The process was to copy the markup from the &lt;a href=&quot;https://v4-alpha.getbootstrap.com/components/dropdowns/&quot;&gt;documentation&lt;/a&gt;, 
use that as the JSX for the React component to render (which will require all the Bootstrap CSS to render properly),
then adding an event handler for the button to toggle the dropdown state. I watched the DOM for changes
in Chrome DevTools in order to see that the outermost DOM element receives the class “show” when toggled open and
the ARIA attributes update to reflect the open state.&lt;/p&gt;

&lt;p&gt;Word of caution: this method will only get you so far; the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/v4-dev/js/src/dropdown.js&quot;&gt;JavaScript for the Bootstrap dropdown&lt;/a&gt; component manages a lot more state 
and binds to more events so this may not be the best approach if you want a 100% compliant Bootstrap dropdown
using React for the JS behavior. Nonetheless, it gets you pretty far toward using React with Bootstrap
and avoiding the extra overhead of jQuery being included in your web application just for use with Bootstrap.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Jun 2017 15:50:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2017/06/09/using-bootstrap-components-in-react.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2017/06/09/using-bootstrap-components-in-react.html</guid>
        
        
      </item>
    
      <item>
        <title>JavaScript Object Mutation Gotchas</title>
        <description>&lt;p&gt;In entry level computer science courses, one of the topics you discuss in learning a new programming language is “pass by value” and “pass by reference”. 
I’m going to discuss these concepts in relation to some JavaScript object mutation “gotchas” that can creep up.&lt;/p&gt;

&lt;p&gt;If you open up the console tab of your browser’s dev tools you can paste in the following example. 
You’ll see that primitive types in JavaScript are “passed” by value in assignments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// value of 3 is &quot;copied&quot; to secondNumber&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;secondNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// overriding the value of secondNumber has no effect on firstNumber&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secondNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this is not what happens with objects and their properties. Here’s another example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The green book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this still references firstBook&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;secondBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The blue book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'The blue book'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/3638034/360509&quot;&gt;This StackOverflow answer&lt;/a&gt; calls this “call-by-sharing”. 
Changing the internals of an object mutates the original object.&lt;/p&gt;

&lt;p&gt;Now, where in modern JavaScript usage might this bite a developer? 
For me, it’s often been in mocha tests when I mutate an object’s properties between tests. 
I have a &lt;a href=&quot;https://github.com/headquarters/react-es6-template/blob/object-mutation-example/test/components/Panel.js&quot;&gt;sample test displaying this problem on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Two of my preferred solutions for this, depending on your development environment (browser or server), are to use Object.assign or the ES6 spread operator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The green book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;secondBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The blue book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'The green book' is unchanged&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ES6 spread operator doesn't work in most browsers yet as of 2017-01-05,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// have to test this in the Node REPL&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The green book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;The blue book&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The title property will overwrite the property brought in from via the spread operator&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 'The green book' is unchanged&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, be mindful of the sort-of-pass-by-reference treatment of objects in JavaScript to avoid object mutation gotchas.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 11:40:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2017/01/05/javascript-object-mutation-gotchas.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2017/01/05/javascript-object-mutation-gotchas.html</guid>
        
        
      </item>
    
      <item>
        <title>Install Ruby Gems on Mac OS X without sudo</title>
        <description>&lt;p&gt;I have never had a default installation of Ruby gems on Mac OS X let me simply
install new gems without requiring &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;. If you would like to install Ruby gems
without requiring &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;, do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;GEM_HOME&lt;/code&gt; to your .bash_profile&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;nano ~/.bash_profile&lt;/code&gt; and add &lt;code class=&quot;highlighter-rouge&quot;&gt;export GEM_HOME=/Users/Michael/.gem&lt;/code&gt;
where the path is to your own Home folder&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the gem executables to your system path&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Also in .bash_profile, add &lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=&quot;$GEM_HOME/bin:$PATH&quot;&lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For some reason these simple steps don’t show up in the top StackOverflow answers.
People often suggest using rvm to install a custom Ruby version that won’t require using
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; when installing gems or something like rbenv to create a Ruby environment for the
same benefit. If you simply want to use the default installed Ruby version on Mac OS X
(this works in El Capitan) without requiring &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;, this should do it.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Feb 2016 10:24:00 +0000</pubDate>
        <link>https://www.michaelehead.com/2016/02/06/installing-gems-without-sudo.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2016/02/06/installing-gems-without-sudo.html</guid>
        
        
      </item>
    
  </channel>
</rss>
