<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael&apos;s Headquarters</title>
    <description>Michael Head is a UX-focused software engineer with more than 8 years of experience building awesome user experiences for small agencies, mid-sized companies, and Fortune 50 corporations.
</description>
    <link>https://www.michaelehead.com/</link>
    <atom:link href="https://www.michaelehead.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Feb 2024 21:11:54 -0500</pubDate>
    <lastBuildDate>Sat, 03 Feb 2024 21:11:54 -0500</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>An example multi-host SSH config</title>
        <description>&lt;p&gt;Sometimes I need to open one or more SSH tunnels to remote hosts. I used to do this with aliases in my zsh profile, so I could call something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshhostname&lt;/code&gt; and it would automatically run the ssh tunneling command. I’ve since adopted an SSH config as it made it a lot easier to maintain and had a nice benefit of making the tunnels easier to find for closing later.&lt;/p&gt;

&lt;p&gt;Below is an example multi-host SSH config. It shows how to set up SSH tunneling for two hosts (hostname1 and hostname2). Since hostname3 does not have other directives set for it, it will set up an interactive session.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/.ssh/config

Host hostname1 hostname2 hostname3
  HostName 10.10.10.100

# Create a tunnel (ports below) without opening a session the current shell
Host hostname1 hostname2
  ForkAfterAuthentication yes
  SessionType none

Host hostname1
  LocalForward 4555 10.10.10.100:4555

Host hostname2
  LocalForward 5432 10.10.10.100:5432

Host *
  AddKeysToAgent yes
  UseKeychain yes
  ForwardAgent no # do not need to send local keys to remote machine
  ServerAliveInterval 300
  TCPKeepAlive no
  IdentityFtle ~/.ssh/id_ed25519
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This config is used by referencing the hostname on the command line, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh hostname1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I found that one of my favorite things about using the SSH config with hostnames is that active tunnels show up in the process list with their names such as “ssh hostname1”. This makes it a little easier to kill those sessions on command, such as to re-use a port.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ~/.zshrc

alias killssh=&quot;pgrep -f \&quot;ssh [hostname1|hostname2|hostname3]\&quot; | xargs kill&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this alias, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;killssh&lt;/code&gt; will only the active SSH sessions for your hosts, not all active SSH processes. This is especially useful to prevent accidentally killing the SSH session opened by Rancher Desktop for Docker. If you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps aux | grep ssh&lt;/code&gt; with Rancher Desktop running, you’ll see it has an active SSH session running to a socket:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps aux | grep ssh
&amp;lt;username&amp;gt;          21571   0.0  0.0 33896736    828   ??  S     8:42PM   0:00.00 ssh -F /dev/null -o &amp;lt;truncated&amp;gt; 56843 127.0.0.1 -- sshfs &quot;:/Applications/Rancher Desktop.app/Contents/Resources/resources&quot; &quot;/Applications/Rancher Desktop.app/Contents/Resources/resources&quot; -o slave -o allow_other
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, if you run in an environment where you use Rancher Desktop for Docker containers and have to support a few SSH tunnels locally, hopefully this will help you as well.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Sep 2023 20:53:00 -0400</pubDate>
        <link>https://www.michaelehead.com/2023/09/18/multi-host-ssh-config.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2023/09/18/multi-host-ssh-config.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Using an IP address locally with Node.js 17+</title>
        <description>&lt;p&gt;Try this out: you can access your SvelteKit app locally at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://[::1]:5173&lt;/code&gt;…crazy looking address, huh?&lt;/p&gt;

&lt;p&gt;The following is information specific to a SvelteKit app running on macOS but should apply to any app that runs Node.js 17 or up for a server.&lt;/p&gt;

&lt;p&gt;When running a SvelteKit app locally, it gives your app the default address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:5173&lt;/code&gt;. Normally, this would mean you could access the site at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:5173&lt;/code&gt; as well, given that the loopback IP is normally mapped to localhost. On macOS, if you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /etc/hosts&lt;/code&gt;, you’ll see something like:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1	localhost
255.255.255.255	broadcasthost
::1             localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows that 127.0.0.1 is mapped to localhost. So what’s going? In Node.js 17, there was a &lt;a href=&quot;https://nodejs.org/en/blog/release/v17.0.0#other-notable-changes&quot;&gt;change to the order in which DNS lookup results were ordered&lt;/a&gt; so that instead of re-ordering results to put IPv4 first, it now uses the OS’s results as-is. This means a Node.js 17+ server is binding to the IPv6 address instead of the IPv4, so you can access your site at the “weird” looking address of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://[::1]:5173&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Sep 2023 20:53:00 -0400</pubDate>
        <link>https://www.michaelehead.com/2023/09/18/local-ip-node-17-and-up-copy.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2023/09/18/local-ip-node-17-and-up-copy.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Example of UI pagination for viewing S3 objects</title>
        <description>&lt;p&gt;TLDR: &lt;br /&gt;
Demo of the S3 pagination UI: &lt;a href=&quot;https://coruscating-manatee-4afd46.netlify.app&quot;&gt;https://coruscating-manatee-4afd46.netlify.app&lt;/a&gt; &lt;br /&gt;
Source code: &lt;a href=&quot;https://github.com/headquarters/s3-viewer&quot;&gt;https://github.com/headquarters/s3-viewer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traversing S3 buckets to list objects in a bucket can sometimes be confusing because S3 stores objects, not files and folders. It uses prefixes to fake a directory structure. This fake directory structure is what shows up in its own console UI.&lt;/p&gt;

&lt;p&gt;Another potentially confusing matter in building a UI to traverse S3 objects is the use of the word “pagination” in the client docs. If you’re used to paginating meaning a REST API returns results and a client app shows results with previous/next buttons, then this not the pagination you’re looking for. The &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/guide/paginators.html&quot;&gt;boto3 docs discuss paginators&lt;/a&gt;, for example, but in this case the pagination is meant to go through “pages” of your bucket’s objects all in one process. Say you have 10K objects and set your limit to 1000 per page, you can loop over the paginator 10 times to eventually fetch all the results. Now your server would be holding on to 10K objects, ready to send them…to the client? Given very few UIs would ever display 10K results in a single UI page, this is unrealistic for pagination with a standard client-server architecture.&lt;/p&gt;

&lt;p&gt;A better approach is to work with the prefix and a “continuation token” to pick back up your querying where you leave off in between requests. This is the approach I took to build something akin to the console UI for paginating through an S3 bucket. I used SvelteKit to build the UI and a single API endpoint for fetching object lists with the AWS S3 client library. Going “into” a folder alters the prefix that is used, while moving back and forth between a list “inside” a folder utilizes the continuation token to pick up where you leave off in between requests. No “paginator” required or necessary.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2023 20:03:00 -0400</pubDate>
        <link>https://www.michaelehead.com/2023/03/13/paginating-s3-results-example.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2023/03/13/paginating-s3-results-example.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Configuring Docker for serving a SvelteKit app</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://kit.svelte.dev&quot;&gt;SvelteKit&lt;/a&gt; is a great web framework for building full stack apps using the underlying component model from Svelte. Recently, I had to debug an issue with a form action not working when submitting to the same page the form was served from. As an example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form action=&quot;/go/here&quot; method=&quot;POST&quot;&amp;gt;
...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On submit, both with a normal form POST or using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enhance&lt;/code&gt; action for the form, would lead to the error “Cross-site POST form submissions are forbidden”. This was only in our deployed environment and not locally.&lt;/p&gt;

&lt;p&gt;After some trial and error, searching online, and re-reading the docs on &lt;a href=&quot;https://kit.svelte.dev/docs/adapter-node#environment-variables&quot;&gt;environment variables for the Node.js adapter&lt;/a&gt; I realized I needed to set the ORIGIN when the node server is starting. Note: this is &lt;em&gt;not&lt;/em&gt; set when doing the build itself. The “build” below refers to the “build” folder, not the “build” command in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dockerfile snippet:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# build the app 
RUN npm run build 

# assumes the default SvelteKit host and port
ENV ORIGIN=http://localhost:3000 

# start the node.js app in build folder
CMD [&quot;node&quot;, &quot;build&quot;] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now a form action will POST properly when deployed.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2023 20:03:00 -0400</pubDate>
        <link>https://www.michaelehead.com/2023/03/13/svelte-cross-site-post.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2023/03/13/svelte-cross-site-post.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Artificial delays in Mock Service Worker</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://mswjs.io&quot;&gt;Mock Service Worker&lt;/a&gt; (MSW) is a great library for mocking API calls in your front-end application. This works well both in the browser and in a test environment, such as Jest.&lt;/p&gt;

&lt;p&gt;MSW runs a Service Worker to intercept requests and provide responses immediately back to your API calls with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XHR&lt;/code&gt;, and the like. This means your UI gets nearly-instant responses from your mock API in the browser. However, this can also lead a UI developer to forget that real network calls come with real latency. To ensure your UI works well with various loading states, waiting for network responses, avoids time outs, and so on, you can add a delay to each MSW response as the first parameter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rest.get(&apos;/api/:id&apos;, (req, res, ctx) =&amp;gt; {
  const { id } = req.params;
  const post = data.find(post =&amp;gt; post.id.toString() === id);
  return res(ctx.delay(500), ctx.json(post));
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means each time that API should respond, it waits 500ms before “sending” back the response. With a lot of MSW handlers, this can become slow in your unit tests so it’s a good idea to only add this delay in non-test environments.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { rest } from &apos;msw&apos;;
import data from &apos;./data.json&apos;;

const delay = process.env.NODE_ENV === &quot;test&quot; ? 0 : 500;

export const handlers = [
  rest.get(&apos;/api/:id&apos;, (req, res, ctx) =&amp;gt; {
    const { id } = req.params;
    const post = data.find(post =&amp;gt; post.id.toString() === id);
    return res(ctx.delay(delay), ctx.json(post));
  }),
];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this approach, we can develop our UI in the browser and see our loading states while our automated unit tests can still run fast without pausing for MSW responses.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2022 03:02:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2022/11/21/artificial-delays-in-msw.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2022/11/21/artificial-delays-in-msw.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Bug case studies</title>
        <description>&lt;p&gt;Occasionally bugs come across that are so insidious and hard to find that you spend hours or days trying to replicate them or fix them. This is a collection of case studies around bugs I’ve fixed in my career that were so hard to figure out to either replicate or fix at the time that they’ve stuck with me since.&lt;/p&gt;

&lt;h2 id=&quot;session-leaking-in-nodejs-processes&quot;&gt;Session leaking in Node.js processes&lt;/h2&gt;

&lt;p&gt;We had just launched a new home page built in React.js with a Node.js API backend that was intended to replace a legacy Ext.js application front-end talking to an old web framework built on TCL running on AOLServer (yeah, seriously). After launching, some users started mentioning they were seeing data that didn’t belong with their account, such as “Welcome, Mary” on the home page when they were not Mary. It didn’t happen very often and it was impossible to replicate locally. However, it definitely sounded like session data was leaking between users and we had to figure out how to fix it.&lt;/p&gt;

&lt;p&gt;The first step in fixing the issue was recreating the bug–it was impossible to do so with a local version of the site running. So, I wrote a script in Node.js that would do a tiny load test against our development environment with different test user accounts. It would randomly pick an account, do some screen scraping for CSRF tokens and such, log into that account, and then inspect the resulting home page text results to determine if the resulting HTML had the expected user’s name. This was able to replicate the problem fairly reliably–it was an issue that only crept up given a large enough number of different requests and sessions.&lt;/p&gt;

&lt;p&gt;The project for the new home page consisted of two node.js applications, one was the “parent” application that contained the backend API running in one node.js process that would spawn a child node.js process to create the front-end that would talk to that backend. Requests would hit the front-end, session state would be called from the API, and then the front-end application would server-render a page built with React.js.&lt;/p&gt;

&lt;p&gt;After much digging into the code, debugging, testing, trial and error, swear words, and feelings of despair, with another engineer’s help I finally figured out where the problem was–the interprocess communication between parent and child Node.js processes. As the &lt;a href=&quot;https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options&quot;&gt;Node.js documentation says&lt;/a&gt;: “Keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances.”&lt;/p&gt;

&lt;p&gt;The solution we decided on was using a key/value object that stored a GUID for each request/response pair that our server created on a request, sending a message to the child process with that GUID included, sending the child’s message back with the same GUID, then returning the correct response based on GUID in the key/value pair. An example of the problem and solution can be found &lt;a href=&quot;https://github.com/headquarters/bugs/tree/master/node-ipc&quot;&gt;in this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cdn-caching-a-missing-file&quot;&gt;CDN caching a missing file&lt;/h2&gt;

&lt;p&gt;I was part of a team that was responsible for building a single page application (SPA) in Ember.js. We had just deployed a new version of our application recently and after a few days started receiving some complaints from users that they were experiencing problems with the application. Our customer support folks were telling users to do the “normal” troubleshooting things–clear your browser’s cache, try a different browser, and so on. Nothing seemed to work.&lt;/p&gt;

&lt;p&gt;Across several teams, folks were checking server logs and all kinds of metrics to try to determine the cause. We flushed Akamai’s (our CDN) cache at least once, if not more times. Finally, we had an inkling there was some sort of caching problem going on beyond the CDN so we deployed a new version of the application. Our Ember application used fingerprinting for individual files so that a hash was created when the file changed. We introduced some meaningless change in order to force the hash to change for each file and thus force new files to be pulled down from the origin server and the CDN to the browser.&lt;/p&gt;

&lt;p&gt;This fixed it, but we weren’t quite sure why. I dug into some Splunk logs and finally found a smoking gun: a permission denied error on a JavaScript file that our app needed to run. That explained why the app would fail, but not why the caching seemed to be stuck pulling the wrong thing. Checking the next layer up, I found in our Apache configuration that we set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorDocument 404 http://example.com/#/404&lt;/code&gt; for catching 404 files (the external URL pointed at our own site). This meant that Apache was supposed to respond to requests where a file was not found by returning our site with the “/#/404” appended to the URL. Our SPA used hash routing at the time, so the “/#/404” part of the URL was intended to be picked up by the front-end routing and pull up the correct 404 view.&lt;/p&gt;

&lt;p&gt;The problem with this configuration was that when &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#errordocument&quot;&gt;ErrorDocument&lt;/a&gt; was pointing at an external URL (one starting with HTTP), it would actually return a &lt;em&gt;302&lt;/em&gt; status code, not the original HTTP error status code. As the docs state:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note that when you specify an ErrorDocument that points to a remote URL (ie. anything with a method such as http in front of it), Apache HTTP Server will send a redirect to the client to tell it where to find the document, even if the document ends up being on the same server. This has several implications, the most important being that the client will not receive the original error status code, but instead will receive a redirect status code. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s an &lt;a href=&quot;/images/screenshots/bugs/missing-file-network.jpg&quot;&gt;example of the network tab when this happens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moving one layer higher up our stack, I found that our Akamai configuration was set to cache 302 redirects for quite a while. &lt;a href=&quot;https://learn.akamai.com/en-us/webhelp/ion/oca/GUID-68D6DFBF-3D2A-4B2E-B2D8-C334507D186E.html#GUID-68D6DFBF-3D2A-4B2E-B2D8-C334507D186E__GUID-641CE60B-4CE4-492E-950D-29A18E807F92&quot;&gt;Akamai caches 302s by default if they contain a cache-control header&lt;/a&gt; and we hadn’t modified that setting.&lt;/p&gt;

&lt;p&gt;To summarize, we had the following multi-layer failure:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Failed to read file on disk (permission denied)&lt;/li&gt;
  &lt;li&gt;Apache treats a permission denied failure as a 404&lt;/li&gt;
  &lt;li&gt;ErrorDocument with an external URL masks the 404 with a 302&lt;/li&gt;
  &lt;li&gt;Akamai caches a 302 by default&lt;/li&gt;
  &lt;li&gt;Users kept getting a 302 redirect for a JS file that really returned an HTML file that wouldn’t parse, breaking the entire single page app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Crazy! I’ve recreated the majority of this scenario &lt;a href=&quot;https://github.com/headquarters/bugs/tree/master/missing-file-caching&quot;&gt;in this repo&lt;/a&gt;. I couldn’t emulate a CDN in the repo, but the file that fails to load does have a month-long cache on it which illustrates the issue with a cached 302.&lt;/p&gt;

&lt;h2 id=&quot;cname-failing-to-resolve-inside-aws-vpc&quot;&gt;CNAME failing to resolve inside AWS VPC&lt;/h2&gt;

&lt;p&gt;My team had inherited a project that was setup inside of AWS with most of the infrastructure already in place. When a pull request was created in GitHub, it would automatically stand up a new version of the environment with URL in the form of 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;branch name&amp;gt;.pr.domain.io&lt;/code&gt; that could be used to test a feature before merging the code into master. The stack for an environment consisted of the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an S3 bucket that would hold the front-end static assets for an Angular single page application, named the same as the URL: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;branch name&amp;gt;.pr.domain.io&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a set of Lambda functions that served as the API&lt;/li&gt;
  &lt;li&gt;API Gateway resources for the dynamically created URL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a pull request was merged into master, the master branch would build and deploy to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://dev.domain.io&lt;/code&gt;. When we completed a sprint, we’d manually deploy to “higher” level environments such as UAT or Production. The UAT environment had a URL of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://uat.domain.io&lt;/code&gt; and production’s URL was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://domain.io&lt;/code&gt; without a prefix.&lt;/p&gt;

&lt;p&gt;One of the project’s features involved taking screenshots of the site itself to use as images in a PowerPoint presentation. You might be asking, “Why??”, to which I’d be happy to respond outside of this blog post… This process involved a Lambda function
using headless Chrome to visit the front-end of the site to take screenshots. For example, in the dev environment a Lambda function would attempt to hit the front-end of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://dev.domain.io/some-page&lt;/code&gt;, take a screenshot, and then use that image in a process that created a PowerPoint presentation file and emailed it to the user that had kicked off the process.&lt;/p&gt;

&lt;p&gt;This whole process of standing up a stack and creating a PowerPoint presentation worked well in all environments, &lt;em&gt;except&lt;/em&gt; the pull request (PR) environment. For some reason, PowerPoint slides came back with missing screenshots in that environment. After enabling a ton of logging in the headless Chrome process we found that requests to our dynamically-created URLs returned an error of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net::ERR_NAME_NOT_RESOLVED&lt;/code&gt;. This seemed to be related to DNS name resolution.&lt;/p&gt;

&lt;p&gt;I found one solution that involved changing the endpoint our application code used for PR branches to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;branch name&amp;gt;.pr.domain.io.s3-website-us-east-1.amazonaws.com/&lt;/code&gt;. This seemed to circumvent the DNS resolution issue and worked, but wasn’t a satifsying solution.&lt;/p&gt;

&lt;p&gt;Looking into Route53 settings, I found that our “stable” environment names were all Type A records with an ALIAS to Cloudfront. These S3 buckets never changed names, just contents of them changed, so a stable Cloudfront name could be used to reference them. 
The PR Route53 record, though, was a Type NS with individual entries for each PR environment that had a CNAME referencing the S3 bucket. As a shot in the dark, I modified our Cloudformation template to generate an A record instead of a CNAME for our PR environments and…
it worked! To this day, I’m still not clear why this made a difference (if you happen to know, please reach out!), but it fixed the issue. I was then able to revert the application code back to using the “normal” PR environment URL: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://&amp;lt;branch name&amp;gt;.pr.domain.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is the Cloudformation template snippet before making the change:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  resourceRoute53RecordSetNoCloudFront:
    Condition: conditionIsBranchBuild
    Type: &quot;AWS::Route53::RecordSet&quot;
    Properties:
      ResourceRecords:
        - !GetAtt [resourceS3WebsiteBucket, WebsiteURL]
      Type: CNAME
      TTL: 300
      HostedZoneName: !Sub &quot;${paramEnvironment}.domain.io.&quot;
      Name: !Sub &quot;${paramBranch}.pr.domain.io&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceRecords&lt;/code&gt; property with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AliasTarget&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type: A&lt;/code&gt; below changed the record type:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  resourceRoute53RecordSetNoCloudFront:
    Condition: conditionIsBranchBuild
    Type: &quot;AWS::Route53::RecordSet&quot;
    Properties:
      AliasTarget:
        DNSName: s3-website-us-east-1.amazonaws.com
        HostedZoneId: Z3AQBSTGFYJSTF
      Type: A
      HostedZoneName: !Sub &quot;${paramEnvironment}.domain.io.&quot;
      Name: !Sub &quot;${paramBranch}.pr.domain.io&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don’t have a repo for recreating this issue because it involves a ton of infrastructure to recreate, but the template snippet above is all that had to be changed to switch a Route53 record from a CNAME to an A with an Alias in our stack.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jan 2020 10:55:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2020/01/08/bug-case-studies-copy.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2020/01/08/bug-case-studies-copy.html</guid>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Unzipping a large gzip file in Python</title>
        <description>&lt;h1 id=&quot;the-project&quot;&gt;The Project&lt;/h1&gt;
&lt;p&gt;I worked on a project recently that required ingesting a large flat file that my team received as a gzipped file. The gzipped file was 3GB in size and uncompressed it was about 55GB. It had around 200 million rows in it. The ingest process involved taking that file and getting the data into an Aurora RDS MySQL database.&lt;/p&gt;

&lt;p&gt;I inherited the project from a previous team that had implemented a way of ingesting the file via the Python library Pandas. Pandas can “stream” unzip and decompress a file, grabbing lines of a few chunks at a time (say 10000 lines), and inserting it into a database. I was pretty impressed, given the gzipped file size. Inserting all those records via Pandas took between 4-5 hours.&lt;/p&gt;

&lt;h1 id=&quot;the-environment&quot;&gt;The Environment&lt;/h1&gt;
&lt;p&gt;The gzipped file sat in an S3 bucket that a Python script would read from. The Python script ran in an AWS Step Function that spun up a container via Fargate. The container was maxed out in its resources in ECS with a soft limit of RAM around 30GB and a max disk space of 14GB. So, unzipping this file into memory or onto disk was not an option and the Pandas process worked really well to avoid exhausting memory or disk space.&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;
&lt;p&gt;After doing some performance analysis I found that using the native MySQL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD DATA LOCAL INFILE&lt;/code&gt;, and more specifically its AWS-specific cousin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt;, would be a lot faster than the Pandas process. In fact, it shaved off around 2.5 hours. However, MySQL only supports loading uncompressed files via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;We updated the ingest process to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt; and saw a performance uptick, but we then had to manually uncompress the file before uploading it to its original S3 bucket. This took a long time—uploading a 55GB file via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws s3 cp&lt;/code&gt; would take about an hour from our local machines on our office network. This wasn’t a great compromise because we introduced a manual step that was time consuming and prone to failing (if a computer went to sleep while uploading, for example).&lt;/p&gt;

&lt;p&gt;I started testing out whether we could download the gzipped file to our Fargate container and unzip it there before loading to MySQL. Unfortunately, I ran into memory constraints and disk space constraints in Fargate. At that point we could have scrapped that infrastructure and gone with something else like EC2, but the existing infrastructure was very appealing and it seemed possible to do this without exhausting the container’s memory or disk space. Pandas got away with it, right?&lt;/p&gt;

&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;/h1&gt;
&lt;p&gt;After several rounds of searching online, reading through various StackOverflow answers, and lots of trial and error I finally found a solution. Python could open the gzipped file without reading its entire contents to memory or saving it to disk and boto3 could &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_fileobj&quot;&gt;upload it back to S3 as a file object&lt;/a&gt;. Then, since the file is back in S3 as a decompressed file as if we’d uploaded it ourselves, we can continue to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD DATA FROM S3&lt;/code&gt; as normal. Voila! Problem solved with &lt;a href=&quot;https://github.com/headquarters/python-streaming-unzip/blob/master/src/main.py#L22-L23&quot;&gt;two lines of Python code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To showcase the power of this method for decompressing a large file without exhausting memory or disk space, I put together a repository that demonstrates the various scenarios I tried: &lt;a href=&quot;https://github.com/headquarters/python-streaming-unzip&quot;&gt;https://github.com/headquarters/python-streaming-unzip&lt;/a&gt;. Here you can play around with a Docker container that can execute a Python script that attempts to decompress a gzipped file into memory, onto disk, or via the streaming method. You’ll have to provide your own large compressed file in S3, though.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Dec 2019 22:11:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2019/12/27/python-streaming-unzip.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2019/12/27/python-streaming-unzip.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>The Founder&apos;s Mentality, DevOps, and Agile</title>
        <description>&lt;p&gt;I recently listened to the audiobook &lt;a href=&quot;https://www.foundersmentality.com/&quot;&gt;The Founder’s Mentality&lt;/a&gt;. This book posits that many companies experience 3 problems during their growth phase: overload, stallout, and freefall. As companies get larger, complexity and bureauracy increase, so “overload” starts to kick in. Left unchecked, this overload eventually leads to stallout—the company is stifled in terms of innovation and growth is difficult. Finally, when things start to look really bleak, the company goes into freefall where the stock starts to decline, people leave, and eventually the company folds.&lt;/p&gt;

&lt;p&gt;The book recommends 9 things to turn the ship around for a growing company: a bold mission, “spikiness”, a limitless horizon, customer advocacy, frontline empowerment, relentless experimentation, strong cash focus, a bias to action, and an aversion to bureaucracy. I felt there was a lot of overlap between what these recommendations and two other popular movements today, namely DevOps and Agile. I put together the following table to explain this overlap as I see it.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;The Founder’s Mentality&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Agile&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Bold Mission&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Neither DevOps nor Agile has anything to say about your company’s mission. Rather, these practices are meant to help you achieve it.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Spikiness*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Automation, virtualization, and open source software allows the business to focus resources on things that matter most (the “spikes”).&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Short, focused sprints allow us to pivot quickly to something that requires more attention (the “spike”).&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Neither DevOps nor Agile speaks to where a company should spend its resources, but each provides some flexibility in moving those resources around (whether the resource is time, money, or attention). Even most tech companies are not in the business of managing data centers, so why spend the time or money on that non-core business matter?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Insurgency: Limitless Horizon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Again, neither practice has anything to say about how the company defines itself or its potential.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frontline Obsession: Relentless Experimentation&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Experimentation is a key component. This is one way teams continuously learn and improve.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Experimentation is not mentioned explicitly in Agile, but it is probably an unspoken tenet as means of continuous improvement.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Lots of overlap with DevOps and The Founder’s Mentality on Experimentation. Agile doesn’t have as much to say directly about experimentation, but it is somewhat implied in the iterative approach of design and development through sprints.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Frontline Obsession: Frontline Empowerment&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;“Keep pushing quality closer to the source.” The frontline is the source of design/dev/ops work.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Heavy emphasis on teams: “The best architectures, requirements, and designs emerge from self-organizing teams.“&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Agile’s emphasis on self-organizing and empowered teams really echoes the “frontline empowerment” of The Founder’s Mentality. Also, DevOps emphasizes pushing quality out to the source of work, which requires empowering the teams doing the work.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;*&lt;a href=&quot;https://www.foundersmentality.com/2015/12/16/the-elements-of-founders-mentality-spikiness/&quot;&gt;Spikiness&lt;/a&gt;: “Competitiveness comes from sticking to what the company is great at and focusing resources ruthlessly on these few spikey capabilities.” “[B]eing world class at those things that really matter for customers and decidedly average at the rest.”&lt;/p&gt;

&lt;p&gt;Sources: &lt;a href=&quot;https://itrevolution.com/book/the-devops-handbook/&quot;&gt;The DevOps Handbook&lt;/a&gt; and &lt;a href=&quot;http://agilehandbook.com/agile-handbook.pdf&quot;&gt;Agile Handbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a ton of overlap between these 3 topics. In my mind, The Founder’s Mentality is DevOps/Agile explained in a way that non-technology-centric business executives can relate to. It reinforces to me that, at the end of the day, product, design, development, operations, and every other unit of business are all trying to achieve the same thing, but we have various ways to execute on that vision and occasionally our terminology doesn’t line up. Hopefully a comparison like this will help bridge the gap for some folks out there.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Dec 2018 03:30:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2018/12/10/founders-mentality-devops-and-agile.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/12/10/founders-mentality-devops-and-agile.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>Ember.js - 6 months in</title>
        <description>&lt;h1 id=&quot;my-first-six-months-with-emberjs&quot;&gt;My first six months with Ember.js&lt;/h1&gt;
&lt;p&gt;After reading &lt;a href=&quot;https://medium.com/@Realrobwebb/my-first-6-months-using-ember-a-retrospective-a5ecf3259b09&quot;&gt;this Ember.js six months in article&lt;/a&gt;, I realized it was time to publish my own 6-months-in report. I started with Ally Financial as a Senior Front-end Engineer in November 2017, so as of this writing it’s been about 6 months. Since March, though, I’ve been a tech lead for a scrum product team, so I haven’t been quite as hands-on in day-to-day development. I still do a good bit of new feature work, bug fixing, code review, and so on, though, so I haven’t left development behind completely.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Before I go on, I must emphasize the following: &lt;em&gt;the work of all the Ember.js core team and the community of developers is amazing and I am in no way trying to disparage the work of those involved or belittle their effort. When it comes to technology, as with everything, there are trade-offs; they’ve chosen certain design decisions that, say, the React team has not. I fully respect these decisions, even if I don’t always agree with them.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;convention-over-configuration&quot;&gt;Convention over configuration&lt;/h2&gt;
&lt;p&gt;Most of my professional front-end experience has invovled plain ol’ JavaScript, jQuery, or React. I really grew to like the React mental model when I worked in it in previous jobs. This has been something that is very hard to get used to in the more MVC-esque approach that Ember takes. Obviously, it’s not a fair comparison because React is “just” the view layer, whereas Ember is a framework for web applications. Nonetheless, I feel the whole ecosystem of React, Webpack, React Router, and Redux lends itself to building “ambitious” web applications just as easily as Ember lends itself to the same. It can be overwhelming connecting all the “plumbing” to fit these disparate libraries together, but that doesn’t feel much more difficult than figuring out all the conventions that Ember follows. And Ember makes heavy use of conventions—one of its mottos is “convention over configuration” (influenced by Ruby on Rails).&lt;/p&gt;

&lt;p&gt;The build tool that Ember uses under the hood, &lt;a href=&quot;http://broccolijs.com/&quot;&gt;Broccoli&lt;/a&gt;, has a pretty straightforward concept—it works with trees, as opposed to files. This seems very simple, but can lead to very strange issues when it comes to merging trees. Naming collisions cause very-hard-to-debug errors. For example, we realized one of our app files had the same name as a 3rd party dependency, so it was overriding the dependency. No compile or runtime errors.&lt;/p&gt;

&lt;p&gt;One category of conventions that is still somewhat confusing to me is add-ons vs. apps. The whole index.js vs. ember-cli-build.js file seems like an arbitrary distinction—each type of project has each of the files, but apps use one file (ember-cli-build.js) and add-ons use the other. Huh?&lt;/p&gt;

&lt;p&gt;Also, add-ons require re-exporting files for use in the consuming app. That really threw me off in my work starting out with apps that had add-ons because the duplication seemed so unnatural. This isn’t such a problem if you let ember-cli handle all the file manipulation for you, but that in and of itself takes somet time to master; to remind yourself “oh yeah, I can’t delete anything on my own or else things get out of sync” or “I shouldn’t create this file by hand because then it won’t have a re-exported file created for it, unless I remember to do it manually”.&lt;/p&gt;

&lt;h2 id=&quot;templating&quot;&gt;Templating&lt;/h2&gt;
&lt;p&gt;Coming from React, templating and components in Ember is my biggest pain point. Having used ES6 modules in React and relying on JavaScript’s import system, I was used to being very explicit about dependencies. With Handlebars templates, everything shares a global scope so anything is usable from anywhere. Also, Handlebars templates don’t serve as UI components on their own—their behavior is encapsulated in a backing JS file. This was very strange coming from the single-file concept of JSX where behavior and template were contained in a single file. And this is coming from someone that had to unlearn the “separation of concerns” mantra when starting out in React; having learned it, I loved it, and it was hard to go back!&lt;/p&gt;

&lt;h2 id=&quot;jquery&quot;&gt;jQuery&lt;/h2&gt;
&lt;p&gt;Ember still relies on jQuery under the hood for DOM manipulation, but that is going away soon. The problem with it at the moment is developers tend to rely too heavily on it, because it’s there. At least in a fresh React app, it’s not available, so you have to do things more “the React way”. I think having jQuery around allows you to break out of Ember’s component model too easily, so I’m glad it’s going away in the future.&lt;/p&gt;

&lt;h2 id=&quot;always-pros-and-cons&quot;&gt;Always pros and cons&lt;/h2&gt;
&lt;p&gt;There are always pros and cons to every piece of technology and you ultimately have to pick the right tool for the job without being overly dogmatic about your decision. I think Ember is a great addition to the tools available to web developers these days. It’s worth knowing about these pros and cons before diving into a new framework, so hopefully this helped give some insight into what a newbie Ember developer coming from a React world might expect.&lt;/p&gt;

</description>
        <pubDate>Sat, 10 Mar 2018 04:48:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2018/03/10/ember-js-6-months-in.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/03/10/ember-js-6-months-in.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>How to Create a Bookmarklet</title>
        <description>&lt;p&gt;JavaScript bookmarklets are snippets of code that can manipulate webpages. They’re sometimes
useful for small automation tasks, such as filling out a form or clicking buttons. In
this post I’ll walk through one way to create a bookmarklet.&lt;/p&gt;

&lt;p&gt;I used node version 8.1.2 and npm version 5.0.3 for the following steps. You can also 
do all this in a simple text editor, but the addition of a build step makes the workflow a bit faster. 
Without the build step, you have to escape the output and put it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; 
yourself or use an &lt;a href=&quot;http://userjs.up.seesaa.net/js/bookmarklet.html&quot;&gt;online bookmarklet generator&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In this example, we’re going to create a bookmarklet that takes the page title and displays 
it at the top of the page.&lt;/p&gt;

&lt;p&gt;Start by creating a directory for the project, going into it, and initializing an NPM package:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;show-title-bookmarklet
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;show-title-bookmarklet
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When prompted for all the NPM init steps, just keep hitting enter (for the sake of the example).&lt;/p&gt;

&lt;p&gt;Next, we’ll install the &lt;a href=&quot;https://www.npmjs.com/package/bookmarklet&quot;&gt;bookmarklet&lt;/a&gt; NPM 
package that can create our bookmarklet. Then, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; directory to contain our source
file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bookmarklet &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;src&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file at the root of your project and add a “build” script
that invokes the bookmarklet on the file in “src/index.js” and outputs it to 
“dist/bookmarklet.js”, like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bookmarklet src/index.js dist/bookmarklet.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s create the file at src/index.js that will be our bookmarklet source:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.title__bookmarklet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;existingContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;title__bookmarklet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textAlign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;16px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontFamily&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;lightyellow&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;100vw&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;99999&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;titleContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Back at the command line, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; in order to create your bookmarklet.js
in the “dist” folder. The file will contain code in the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;javascript:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; your code here &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;o&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Copy the contents of dist/bookmarklet.js. In your browser (other than Edge :),
add a new bookmark and paste the bookmarklet contents in the URL field and set
the page title to whatever you want. These steps are highlighted in the GIF below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gifs/bookmarklet.gif&quot; alt=&quot;Animation showing the steps in the preceding paragraph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And done! Congratulations, you made a bookmarklet with a build step. Now, if you want to edit
the source file you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; and regenerate it to have a completely new
version. The example we created here is available as a 
&lt;a href=&quot;https://github.com/headquarters/show-title-bookmarklet&quot;&gt;GitHub repo&lt;/a&gt;, too.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 04:48:00 -0500</pubDate>
        <link>https://www.michaelehead.com/2018/03/10/how-to-create-a-bookmarklet.html</link>
        <guid isPermaLink="true">https://www.michaelehead.com/2018/03/10/how-to-create-a-bookmarklet.html</guid>
        
        <category>javascript</category>
        
        <category>development</category>
        
        
      </item>
    
  </channel>
</rss>
